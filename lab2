#include <iostream>
#include <vector>
#include <random>
#include <chrono>
#include <cmath>
#include <arm_neon.h> // ARM NEON头文件

using namespace std;
using namespace std::chrono;

// 生成对角占优矩阵
void  matrix(vector<vector<float>>& A, int n) {
    random_device rd;
    mt19937 gen(rd());
    uniform_real_distribution<float> dis(1.0, 10.0);

    for (int i = 0; i < n; i++) {
        float row_sum = 0.0f;
        for (int j = 0; j < n; j++) {
            if (i != j) {
                A[i][j] = dis(gen);
                row_sum += fabs(A[i][j]);
            }
        }
        A[i][i] = row_sum + 1.0f; // 确保对角占优
    }
}

// 串行高斯消去
void  chuanxing(vector<vector<float>>& A, int n) {
    for (int k = 0; k < n; k++) {
        // 主元归一化
        for (int j = k + 1; j < n; j++) {
            A[k][j] /= A[k][k];
        }
        A[k][k] = 1.0f;

        // 行消去
        for (int i = k + 1; i < n; i++) {
            float factor = A[i][k];
            for (int j = k + 1; j < n; j++) {
                A[i][j] -= factor * A[k][j];
            }
            A[i][k] = 0.0f;
        }
    }
}

// NEON并行化高斯消去
void neon(vector<vector<float>>& A, int n) {
    for (int k = 0; k < n; k++) {
        // 加载主元
        float pivot = A[k][k];
        float32x4_t pivot_vec = vdupq_n_f32(1.0f / pivot);

        // 向量化归一化
        int j = k + 1;
        for (; j + 4 <= n; j += 4) {
            float32x4_t row = vld1q_f32(&A[k][j]);
            row = vmulq_f32(row, pivot_vec);
            vst1q_f32(&A[k][j], row);
        }
        // 处理剩余元素
        for (; j < n; j++) A[k][j] /= pivot;
        A[k][k] = 1.0f;

        // 向量化消去
        for (int i = k + 1; i < n; i++) {
            float32x4_t factor_vec = vdupq_n_f32(A[i][k]);
            j = k + 1;
            for (; j + 4 <= n; j += 4) {
                float32x4_t a_kj = vld1q_f32(&A[k][j]);
                float32x4_t a_ij = vld1q_f32(&A[i][j]);
                a_ij = vmlsq_f32(a_ij, factor_vec, a_kj); // a_ij -= factor * a_kj
                vst1q_f32(&A[i][j], a_ij);
            }
            // 处理剩余元素
            for (; j < n; j++) A[i][j] -= A[i][k] * A[k][j];
            A[i][k] = 0.0f;
        }
    }
}

// 验证结果一致性
bool verify(const vector<vector<float>>& A, const vector<vector<float>>& B, int n, float epsilon = 1e-4f) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (fabs(A[i][j] - B[i][j]) > epsilon) {
                cerr << "验证失败 at (" << i << "," << j << "): "
                    << A[i][j] << " vs " << B[i][j] << endl;
                return false;
            }
        }
    }
    return true;
}

int main() {
    const int sizes[] = { 128, 256, 512 }; // 测试不同规模
    const int num_tests = sizeof(sizes) / sizeof(sizes[0]);

    for (int t = 0; t < num_tests; t++) {
        int n = sizes[t];
        vector<vector<float>> A_chuanxing(n, vector<float>(n));
        vector<vector<float>> A_neon(n, vector<float>(n));

        // 生成相同矩阵
        matrix(A_chuanxing, n);
        A_neon = A_chuanxing;

        // 串行版本测试
        auto start = high_resolution_clock::now();
        chuanxing(A_chuanxing, n);
        auto end = high_resolution_clock::now();
        auto serial_time = duration_cast<microseconds>(end - start).count();

        // NEON版本测试
        start = high_resolution_clock::now();
        neon(A_neon, n);
        end = high_resolution_clock::now();
        auto neon_time = duration_cast<microseconds>(end - start).count();

        // 验证结果
        if (!verify(A_chuanxing, A_neon, n)) {
            cerr << "结果验证失败！" << endl;
            return 1;
        }

        // 输出结果
        cout << "Matrix " << n << "x" << n << ":\t"
            << "chuanxing: " << serial_time / 1000.0 << " ms\t"
            << "NEON: " << neon_time / 1000.0 << " ms\t"
            << "Speedup: " << (float)serial_time / neon_time << "x" << endl;
    }
    return 0;
}
